<?php

// om agplant

/**
 * Implements hook_ctools_plugin_directory().
 */
function om_agman_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'om' && $plugin_type == 'om_components') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'dh' && $plugin_type == 'dh_variables') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'dh' && $plugin_type == 'dh_components') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_views_api().
 * 
 * Used for enabling using templates inside my module
 */
function om_agman_views_api() {
  return array(
    'api' => 3, 
    'path' => drupal_get_path('module', 'om_agman'), 
    'template path' => drupal_get_path('module', 'om_agman') . '/templates',
  );
}

/*
function om_agman_theme($existing, $type, $theme, $path) {
  return array (
    'views-view-table--ipm-planning-grid' => array (
      'variables' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'views-view-table--ipm-planning-grid' ,
      'base hook' => 'views_view_table',
      'path' => drupal_get_path('module', 'om_agman'),
    ),
  ); 
}
*/

function om_agman_entity_ts_event_types_alter(&$event_types) {
  // insert ts events for AR fields/properties ()such as startdate, enddate, dh_link_submittal_feature) 
  // insert ts events for those linked via adminreg 
  //   system erefs like dh_link_submittal_feature
  $event_types['dh_adminreg_feature'] += array(
    'agman_event_dh_link_submittal_feature' => array(
      'bundle' => 'agchem_app', // FALSE means it happens for all
      'entity_type' => 'dh_feature',
      'multiplicity' => 'tsvalue_singular', // set adminid as tsvalue, make it unique
      'featureid' => array('value_src_type'=> 'eref_targetid', 'value' => 'dh_link_feature_submittal'),
      'map' => array(
        // object permits sending an integer OR varkey to varid and controller figures it out
        'varid' => array('value_src_type'=> 'constant', 'value' => 'event_dh_link_submittal_feature'),
        'tstime' => array('value_src_type'=> 'property', 'value' => 'startdate'),
        'tsendtime' => array('value_src_type'=> 'property', 'value' => 'enddate'),
        'tsvalue' => array('value_src_type' => 'property', 'value' => 'adminid'),
        'tscode' => array('value_src_type' => 'constant', 'value' => 'dh_adminreg_feature'),
      ),
    ),
    'agman_event_adminreg_feature' => array(
      'bundle' => 'agchem_app', // FALSE means it happens for all
      'entity_type' => 'dh_adminreg_feature',
      'multiplicity' => 'singular',
      'featureid' => array('value_src_type'=> 'property', 'value' => 'adminid'),
      'map' => array(
        // object permits sending an integer OR varkey to varid and controller figures it out
        'varid' => array('value_src_type'=> 'constant', 'value' => 'agchem_application_event'),
        'tstime' => array('value_src_type'=> 'property', 'value' => 'startdate'),
        'tsendtime' => array('value_src_type'=> 'property', 'value' => 'enddate'),
        'modified' => array('value_src_type'=> 'property', 'value' => 'modified'),
        'tsvalue' => array('value_src_type' => 'constant', 'value' => NULL),
        'tscode' => array('value_src_type' => 'property', 'value' => 'ftype'),
      ),
    ),
  );
}

function om_agman_get_block_farmid($blockid) {
  return dh_getMpFacilityHydroId($blockid);
}

function om_agman_get_farm_blocks($farmid) {
  return array();
}

function om_agman_form_block_select(&$element, $farmid = FALSE) {
  $deftable = array(); // need to translate normal select to table select syntax
  $def = $element['und']['#default_value'];
  $src_format = $element['und']['#type'];
  //dpm($element,'block select element');
  //dpm($def,'block select #default_value');
  foreach ($def as $selkey => $selopt ) {
    $deftable[$selopt] = 1;
    if (!$farmid or empty($farmid)) {
      // if this is a new event, caller must specify farmid
      // otherwise try to guess from one of the existing options, 
      // if src_format is 'select' we expect hydroid to be the value
      // otherwise this is already formatted as a check list so we expect hydroid to be the key
      $eid = ($src_format == 'select') ? $selopt : $selkey;
      $farmid = om_agman_get_block_farmid($eid);
    }
  }
  //dpm($farmid,"farm id");
  $element['und']['#empty'] = t('None Selected.');
  $element['und']['#type'] = 'tableselect';
  $element['und']['#default_value'] = $deftable;
  $element['und']['#header'] = array(
    'label' => 'Block', 
  );
  $opts = array();
  // get vineyard blocks
  if ($farmid) {
    $blockids = dh_get_facility_mps($farmid);
    $q = db_query("select hydroid, name from {dh_feature} where hydroid IN (:blocklist) order by name", array(':blocklist' => $blockids));
    foreach ($q as $block) {
      $id = $block->hydroid;
      $opts[$id]['label'] .= $block->name;
    }
  }
  // END - tableselect
  $element['und']['#options'] = $opts;
  
  return $element;
}

// custom fiueldformatters
/**
 * Implements hook_field_formatter_info().
 */
function om_agman_field_formatter_info() {
  return array(
    'entityreference_quick_action' => array(
      'label' => t('Add an action link to an entityreference field.'),
      // The important bit...
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function om_agman_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  // @todo: we may simply opt to add this to the standard field link handler as a patch since it 
  // would be useful and would not require a special handler
  if ($display['type'] == 'entityreference_quick_action') {
    $element['confirm'] = array(
      '#title' => t('Add confirm pop-up'),
      '#type' => 'checkbox',
      '#default_value' => $settings['entityreference_quick_action'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 * @todo: do we need this?
function om_agman_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'entityreference_delete') {
    $summary[] = $settings['link'] ? t('Link to the referenced entity') : t('No link');
  }

  if ($display['type'] == 'entityreference_entity_view') {
    $entity_info = entity_get_info($field['settings']['target_type']);
    $view_mode_label = $settings['view_mode'] == 'default' ? t('Default') : $settings['view_mode'];
    if (isset($entity_info['view modes'][$settings['view_mode']]['label'])) {
      $view_mode_label = $entity_info['view modes'][$settings['view_mode']]['label'];
    }
    $summary[] = t('Rendered as @mode', array('@mode' => $view_mode_label));
    $summary[] = !empty($settings['links']) ? t('Display links') : t('Do not display links');
  }

  return implode('<br />', $summary);
}
 */

/**
 * Implements hook_field_formatter_view().
 */
function om_agman_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $settings = $display['settings'];

  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  switch ($display['type']) {
    case 'entityreference_quick_action':
      $args = arg(); // @todo: should get these from the view so that we can take advantage of any set on the view itself - probably can access from the display object
      $base = implode("/", $args);
      $query = drupal_get_query_parameters();
      $link = l("Bloom x", $base, array( 
        'attributes' => array(
          'onclick' => 'return confirm( "Are you sure you want to delete?" ); '
        ), 
        'query' => $query 
        ) 
      );
      $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);

      foreach ($items as $delta => $item) {
        $label = $handler->getLabel($item['entity']);
        // If the link is to be displayed and the entity has a uri, display a link.
        // Note the assignment ($url = ) here is intended to be an assignment.
        if ($display['settings']['link'] && ($uri = entity_uri($field['settings']['target_type'], $item['entity']))) {
          $result[$delta] = array('#markup' => l($label, $uri['path'], $uri['options']));
        }
        else {
          $result[$delta] = array('#markup' => check_plain($label));
        }
      }
      break;
  }

  return $result;
}

/**
 * *****************************************************************
 * Modal Form Support Below
 * *****************************************************************
 */
 
/**
 * Implements hook_menu().
 */
function om_agman_menu() {
  $items = array();
  // this creates a page that will house the link
  // I *think* this might be optional
  $items['om_agman/page'] = array(
    'page callback' => 'om_agman_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // I think this is the definition needed to actually respond to the ajax request
  // %ctools_js is a variable, so actually, this will match ANY link in the form:
  //      om_agman/*
  $items['om_agman/%ctools_js'] = array(
    'page callback' => 'om_agman_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Helper function to make a link.
 * This IS NOT NEEDED, just part of the demo page, but we do this in views with no trouble
 */
function _om_agman_make_link($link_text = '') {
  // Set a default value if no text in supplied.
  if (empty($link_text)) {
    $link_text = 'Magical Modal';
  }

  return '<div id="magical-modal-link">' . l($link_text, 'om_agman/nojs', array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';
}

/**
 * An example page.
 */
function om_agman_page() {
  // this is our page that contains the link to ajax popup
  // is this code needed if we do a view?
  // Load the modal library and add the modal javascript.
  ctools_include('modal');
  ctools_modal_add_js();
  return _om_agman_make_link('Magical modal');
}

/**
 * Ajax menu callback.
 */
function om_agman_callback($ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('om_agman Modal Form'),
    );

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('om_agman_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('om_agman_form');
  }
}

/**
 * Drupal form to be put in a modal.
 */
function om_agman_form($form, $form_state) {
  $form = array();

  $form['new_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Link text'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Drupal form submit handler.
 */
function om_agman_form_submit(&$form, &$form_state) {
  // Generate the new link using the submitted text value.
  $link = _om_agman_make_link($form_state['values']['new_link_text']);

  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();

  // Tell the browser to replace the old link with the new one.
  $form_state['ajax_commands'][] = ajax_command_replace('#magical-modal-link', $link);
}


/**
 * Implements hook_views_pre_render()
 */
function om_agman_views_pre_render(&$views) {
  if ($views->name == 'ipm_planning_grid') {
      // Include the CTools tools that we need.
      ctools_include('ajax');
      ctools_include('modal');

      // Add CTools' javascript to the page.
      ctools_modal_add_js();

    /*
      // Create our own javascript that will be used to theme a modal.
      $om_agman_style = array(
        'happy-modal-style' => array(
          'modalSize' => array(
            'type' => 'fixed',
            'width' => 600,
            'height' => 240,
            'addWidth' => 10,
            'addHeight' => 10,
            'contentRight' => 0,
            'contentBottom' => 0,
          ),
          'modalOptions' => array(
            'opacity' => .6,
            'background-color' => '#684C31',
          ),
          'animation' => 'fadeIn',
          'modalTheme' => 'om_agman_modal',
          // Customize the AJAX throbber like so:
          // This function assumes the images are inside the module directory's "images"
          // directory:
          // ctools_image_path($image, $module = 'ctools', $dir = 'images')
          'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'happy'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
          'closeImage' => theme('image', array('path' => ctools_image_path('modal-close.png', 'happy'), 'alt' => t('Close window'), 'title' => t('Close window'))),
        ),
      );
    // Add the settings array defined above to Drupal 7's JS settings:
    drupal_add_js($om_agman_style, 'setting');
    // @todo: doe we need these or are they just custom for this example?
    // The function below assumes the happy.js file resides in [module_dir]/js
    ctools_add_js('happy', 'happy');
    // The function below assumes the happy.css file resides in [module_dir]/css
    ctools_add_css('happy', 'happy');
    */
  }
}
?>